# md-cms .clinerules

## 1. プロジェクト概要
- プロジェクト名: md-cms
- 概要: マークダウンCMSシステム。ブログのスタティックサイトジェネレーションに利用するための簡易CMSサーバを開発する。
- 目的:
  - 各記事ごとにフォルダを作成し、そのフォルダ名を記事IDおよびURIとして利用する。
  - 各記事はフォルダ直下の固定名称 index.md (Markdown形式) に記述し、frontmatterによりメタデータ (id, title, created_at, categories, tags, authorなど) を管理する。
  - 画像は各記事フォルダ内の imagesディレクトリに格納する。

## 2. ディレクトリ・ファイル構造
- 各記事は以下のようなフォルダ構造とする:
  • /<記事ID>/
    - index.md
    - /images/
      - image1.jpg, image2.jpg, … 
- 記事フォルダ名は記事IDおよびURIとなる。

## 3. API 仕様 (記事関連)
- GET /posts
  - 全記事のメタデータおよび必要な情報を JSON Array で返す。
- GET /posts?id=xxxx
  - 指定された記事IDの記事情報を返す。
- GET /posts?categories=xxxx,yyyy
  - 複数のカテゴリをカンマ区切りで指定し、対象記事を取得する。
- GET /posts?hoge=xxxx,yyyy
  - カスタムタグを指定し、frontmatterから一致する記事を取得する。
- GET /categories
  - 全記事のメタデータから抽出したユニークなカテゴリ一覧を JSON Array で返す。
- GET /hoge
  - 指定されたカスタムタグを frontmatter から抽出し、ユニークな配列で返す。

## 4. API 仕様 (画像関連)
- GET /images?id=xxx
  - 記事レスポンスの images キーに含まれる画像パスを指定し、対象画像を返す。

## 5. 開発環境および動作仕様
- 使用言語: TypeScript
- 実行形式: 実行可能バイナリとして提供
- サーバ起動
  - 起動コマンド: sh md-cms
  - ローカル環境では port 11920 でサーバが起動
- サーバは Next.js のスタティックジェネレーションとの連携を前提とし、記事のMarkdownをHTMLに変換後、Base64エンコードしてレスポンスに含める。
- 画像もサーバからダウンロード可能なように提供する。

## 6. コーディングスタンダード・ツール
- コーディング規約:
  - 命名規則: キャメルケースやパスカルケースを採用
  - ファイル名は一貫性を持たせる (例: index.md, md-cms.ts など)
- フォーマット・Lint:
  - Prettier および ESLint の導入を推奨
- ディレクトリ構造:
  - 各記事フォルダはプロジェクトルート直下に配置する

## 7. その他の考慮事項
- APIのパフォーマンスおよびエラーハンドリングの徹底
- ローカル環境（ObsidianやVSCode）でのプレビュー環境の確保
- 今後の拡張として、テスト、デプロイ、CI/CDの整備を検討する
